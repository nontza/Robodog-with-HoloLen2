using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System;
using System.Runtime.InteropServices;
using Robodog;
using System.IO.Compression;
using System.Security.Cryptography;

public class Posecommand : MonoBehaviour
{
    /*public GameObject Object;
    public float speed;*/

    private UdpClient udpClient;

    HighCMD cmd = new HighCMD { };

    // Robodog
    IPEndPoint targetEndPoint = new IPEndPoint(IPAddress.Parse("192.168.12.1"), 8082);

    void Start()
    {
        try
        {
            udpClient = new UdpClient();
            udpClient.Connect(targetEndPoint);
        }
        catch (Exception e)
        {
            Debug.LogError($"Error occurred while connecting to {targetEndPoint}: {e.Message}");
        }
    }

    private void OnTriggerStay(Collider collision)          // Check Trigger Continuously
    {
        if (collision.tag == "Index")
        {
            Debug.Log("OnTriggerStay");
            //Object.transform.Translate(Vector3.forward * Time.deltaTime * speed);
            //Object = GameObject.Find("Robot");
            //Object = GameObject.Find("Ball");
            Forward();
        }

        if (collision.tag == "Middle")
        {
            Debug.Log("OnTriggerStay");
            //Object = GameObject.Find("Ball");
            Left();
        }

        if (collision.tag == "Pinky")
        {
            Debug.Log("OnTriggerStay");
            //Object = GameObject.Find("Ball");
            Right();
        }
        /*
        if (collision.tag == "Ring")                    
        {
            Debug.Log("OnTriggerStay");
            Object = GameObject.Find("Ball");
        }
        
        if (collision.tag == "metacarplals")
        {
            Debug.Log("OnTriggerStay");
            Object = GameObject.Find("Ball");
            Sit();
        }

        if (collision.tag == "RingKnuckle")
        {
            Debug.Log("OnTriggerStay");
            Object = GameObject.Find("Ball");
            Stand();
        }
        */
    }

    public void Forward()
    {
        Debug.Log("go forward");

        byte[] byteArray = new byte[]  {
                0xfe, 0xef, 0xee, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x02, 0x01, 0x00, 0xcd, 0xcc, 0xcc, 0x3d, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0xcd, 0xcc, 0x4c, 0x3e, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0xa1, 0x13, 0x3a, 0xcd };
        udpClient.Send(byteArray, byteArray.Length);
    }

    public void Left()
    {
        Debug.Log("turn left");

        byte[] byteArray = new byte[]{
                0xfe, 0xef, 0xee, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x02, 0x01, 0x00, 0xcd, 0xcc, 0xcc, 0x3d, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0xcd, 0xcc, 0x4c, 0x3e, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xe8, 0xe2, 0xd8

            };
        udpClient.Send(byteArray, byteArray.Length);
    }

    public void Right()
    {
        Debug.Log("turn right");

        byte[] byteArray = new byte[]{
                0xfe, 0xef, 0xee, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x02, 0x01, 0x00, 0xcd, 0xcc, 0xcc, 0x3d, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0xcd, 0xcc, 0x4c, 0x3e, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x80, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0xbd, 0xa9, 0xfe
            };
        udpClient.Send(byteArray, byteArray.Length);
    }

    public void Stand()
    {
        Debug.Log("stand");
    }

    public void Sit()
    {
        Debug.Log("sit");

        byte[] byteArray = new byte[] {
                0xfe, 0xef, 0xee, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0xfd, 0xc8, 0x10, 0x41
                };
        udpClient.Send(byteArray, byteArray.Length);
    }
    

}
